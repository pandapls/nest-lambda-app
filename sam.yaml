AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Default: staging
    AllowedValues: [staging, test, production]
    Description: Deployment environment
  DatabaseUrlWrite:
    Type: String
    NoEcho: true
    Description: Database connection URL for writes
    Default: ""
  DatabaseUrlRead:
    Type: String
    NoEcho: true
    Description: Database connection URL for reads
    Default: ""
  GithubToken:
    Type: String
    NoEcho: true
    Description: GitHub Personal Access Token
    Default: ""

Globals:
  Function:
    Timeout: 300
    MemorySize: 1024
    Runtime: nodejs20.x
    Architectures: ['arm64']
    Environment:
      Variables:
        PRISMA_SCHEMA_DISABLE_ADVISORY_LOCK: '1'
        PRISMA_GENERATE_SKIP_DOWNLOAD: 'true'
        PRISMA_CLI_QUERY_ENGINE_TYPE: 'library'
        PRISMA_ENGINE_PROTOCOL: 'binary'
        DEBUG: 'prisma:*'
    EphemeralStorage:
      Size: 512
  Api:
    OpenApiVersion: '2.0'
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'Content-Type,Authorization'"
      AllowOrigin: "'*'"
      MaxAge: 600

Resources:
  LambdaInternetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: vpc-0766b6a96681df539
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-lambda-internet-access'
        - Key: Environment
          Value: !Ref Environment
  LambdaInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref LambdaInternetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: nat-05a4e0139eb3fd096
  LambdaSubnetFRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: subnet-03a76ffca990d2cca
      RouteTableId: !Ref LambdaInternetRouteTable
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'Security group for ${AWS::StackName} Lambda function'
      VpcId: vpc-0766b6a96681df539
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow HTTPS outbound
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow HTTP outbound
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: 0.0.0.0/0
          Description: Allow DNS queries
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          DestinationSecurityGroupId: sg-0dabb594f5cfcbf34
          Description: Allow database access
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-lambda-sg'
  DatabaseLambdaIngressRule:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: sg-0dabb594f5cfcbf34
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      SourceSecurityGroupId: !Ref LambdaSecurityGroup
      Description: !Sub 'Allow Lambda access to database'
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: api
      Auth:
        DefaultAuthorizer: NONE
  NestjsFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - LambdaSubnetFRouteTableAssociation
      - DatabaseLambdaIngressRule
    Properties:
      CodeUri: dist/
      Handler: lambda.handler
      MemorySize: 3008
      Timeout: 300
      Policies:
        - S3CrudPolicy:
            BucketName: mina-community-assets
        - VPCAccessPolicy: {}
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - subnet-03a76ffca990d2cca
      Environment:
        Variables:
          APP_ENV: !Ref Environment
          DATABASE_READ_URL: !Ref DatabaseUrlRead
          DATABASE_URL_WRITE: !Ref DatabaseUrlWrite
          GITHUB_TOKEN: !Ref GithubToken
          DATABASE_CONNECTION_LIMIT: '1'
          NODE_ENV: 'production'
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: '1'
      Events:
        RootApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: ANY
            RestApiId: !Ref Api
        ApiEvent:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            RestApiId: !Ref Api
      AutoPublishAlias: live

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/api'
  FunctionArn:
    Description: Lambda Function ARN
    Value: !GetAtt NestjsFunction.Arn